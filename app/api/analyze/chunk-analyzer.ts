import OpenAI from 'openai';
import { ContractAnalysisError } from '@/lib/errors';
import { AnalysisResult } from './types';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export function validateAnalysisResult(result: any): result is AnalysisResult {
  const hasArrayProperty = (obj: any, prop: string): boolean => 
    Array.isArray(obj[prop]) && obj[prop].every(item => typeof item === 'string');

  return (
    result &&
    typeof result === 'object' &&
    typeof result.summary === 'string' &&
    hasArrayProperty(result, 'keyTerms') &&
    hasArrayProperty(result, 'potentialRisks') &&
    hasArrayProperty(result, 'importantClauses') &&
    (!result.recommendations || hasArrayProperty(result, 'recommendations'))
  );
}

export async function analyzeChunk(chunk: string, chunkIndex: number, totalChunks: number): Promise<AnalysisResult> {
  console.log(`[Server] Analyzing chunk ${chunkIndex + 1}/${totalChunks}`);
  
  const prompt = `Analyze the following contract text and provide a structured analysis in JSON format. 
This is chunk ${chunkIndex + 1} of ${totalChunks}.

Contract text:
${chunk}

You must respond with a valid JSON object containing these fields:
{
  "summary": "A brief summary of this section's content",
  "keyTerms": ["term 1", "term 2", ...],
  "potentialRisks": ["risk 1", "risk 2", ...],
  "importantClauses": ["clause 1", "clause 2", ...],
  "recommendations": ["recommendation 1", "recommendation 2", ...]
}

The summary should be a string, and all other fields must be arrays of strings. Even if you find nothing relevant, return empty arrays, but maintain the structure.`;

  const response = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-1106",
    messages: [
      {
        role: "system",
        content: "You are a legal analysis assistant specialized in contract review. Analyze the contract and return results in JSON format. Focus on identifying key terms, potential risks, and important clauses. Be concise and precise. Always return arrays for all fields, even if empty. Include a brief summary of the analyzed section."
      },
      {
        role: "user",
        content: prompt
      }
    ],
    temperature: 0.3,
    response_format: { type: "json_object" }
  });

  const content = response.choices[0]?.message?.content;
  if (!content) {
    throw new ContractAnalysisError(
      'No analysis generated by AI model',
      'API_ERROR'
    );
  }

  let parsedContent: any;
  try {
    parsedContent = JSON.parse(content);
  } catch (error) {
    console.error('[Server] JSON parsing error:', error);
    throw new ContractAnalysisError(
      'Invalid JSON response from AI model',
      'API_ERROR'
    );
  }

  if (!validateAnalysisResult(parsedContent)) {
    console.error('[Server] Invalid analysis result structure:', parsedContent);
    throw new ContractAnalysisError(
      'Invalid analysis result structure from AI model',
      'API_ERROR'
    );
  }

  // Ensure all required fields exist, even if empty
  const result: AnalysisResult = {
    summary: parsedContent.summary || 'No summary available for this section',
    keyTerms: parsedContent.keyTerms || [],
    potentialRisks: parsedContent.potentialRisks || [],
    importantClauses: parsedContent.importantClauses || [],
    recommendations: parsedContent.recommendations || []
  };

  return result;
}

export async function generateFinalSummary(
  chunkSummaries: string[],
  allKeyTerms: string[],
  allPotentialRisks: string[],
  allImportantClauses: string[],
  allRecommendations: string[]
): Promise<string> {
  const summaryResponse = await openai.chat.completions.create({
    model: "gpt-3.5-turbo-1106",
    messages: [
      {
        role: "system",
        content: "You are a legal analysis assistant. Provide a concise executive summary of the contract analysis."
      },
      {
        role: "user",
        content: `Based on the following findings, provide a concise executive summary of the contract:\n\nSection Summaries:\n${chunkSummaries.map((summary, i) => `Section ${i + 1}: ${summary}`).join('\n')}\n\nKey Terms:\n${allKeyTerms.map(term => `- ${term}`).join('\n')}\n\nPotential Risks:\n${allPotentialRisks.map(risk => `- ${risk}`).join('\n')}\n\nImportant Clauses:\n${allImportantClauses.map(clause => `- ${clause}`).join('\n')}\n\nRecommendations:\n${allRecommendations.map(rec => `- ${rec}`).join('\n')}`
      }
    ],
    temperature: 0.3
  });

  const summaryContent = summaryResponse.choices[0]?.message?.content;
  if (!summaryContent) {
    throw new ContractAnalysisError(
      'No summary generated by AI model',
      'API_ERROR'
    );
  }

  return summaryContent;
}